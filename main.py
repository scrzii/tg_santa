from configparser import ConfigParser
import re
import datetime

from requests import Timeout

from tgBot import UpdateException, MessageHandlerAbs, TelegramBotCreator, Keyboard, Options, InlineKeyboard, \
    ReplyKeyboard, tg_object_classes, RemoveReplyKeyboard


def to_keyboard(keys: list, inline=False, k=2):
    result = []
    for index, key in enumerate(keys):
        result.append(InlineKeyboard.InlineButton(key[0], key[1]) if inline else ReplyKeyboard.ReplyButton(key))
        if index % k == k - 1 and index < len(keys) - 1:
            result.append(Keyboard.NewLine)
    return InlineKeyboard(result) if inline else ReplyKeyboard(result)


class AccessGuard:
    def __init__(self):
        self.permissions = {}
        self.last_role = None

    def __mcaller(self, method):
        self.permissions[method] = self.last_role
        self.last_role = None
        return method

    def access(self, role):
        self.last_role = role
        return self.__mcaller

    def get_permission(self, method):
        if method in self.permissions:
            return self.permissions[method]
        return "any"


ag = AccessGuard()


smiles = {
    "back": "üîô",
    "accept": "‚úÖ",
    "deny": "üö´",
    "male": "üë®‚Äçü¶≥",
    "female": "üë©"
}


class MessageHandler(MessageHandlerAbs):
    @staticmethod
    def new_user(user, bot):
        bot.data["users"].append(user.id)

        if user.id not in bot.data["admins"]:
            user.send("–°–∞–ª—é—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –µ–∂–µ–≥–æ–¥–Ω–æ–π –∏–≥—Ä–µ —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—ã. "
                      "–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç –ø–æ–¥–∞—Ä–æ–∫, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ "
                      "–Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–º —Å–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Å–∞–Ω—Ç–æ–π, –Ω–æ –∏ —É –∫–∞–∂–¥–æ–≥–æ –∏–∑ –≤–∞—Å "
                      "–±—É–¥–µ—Ç —Å–≤–æ–π —Ç–∞–π–Ω—ã–π —Å–∞–Ω—Ç—ã. –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –ø—Ä–æ—Å—Ç—ã, –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "
                      "—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –¥–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –ò–≥—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–∞—è, "
                      "–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã.",
                      to_keyboard([
                          "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" + smiles["accept"]
                      ]))
            user.data["stage"] = "start_idle"
        else:
            user.send()

    @staticmethod
    def undefined_action(user, bot, open_menu=True):
        user.send("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
        if open_menu:
            MessageHandler.open_menu(user, bot)

    @staticmethod
    def undefined_data(user, bot):
        user.send("–î–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")

    @staticmethod
    def start_idle(user, bot):
        if smiles["accept"] not in user.get():
            MessageHandler.undefined_action(user, bot, False)
            return
        user.data["stage"] = "blitz_sex"
        user.send("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª", to_keyboard(["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]))

    @staticmethod
    def blitz_sex(user, bot):
        if user.get().lower() not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
            user.send("–ü–æ–ª —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return

        user.data["sex"] = user.get().lower()
        user.send("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.1970", RemoveReplyKeyboard())
        user.data["stage"] = "blitz_birth"

    @staticmethod
    def blitz_birth(user, bot):
        try:
            user.data["birth"] = parse_date(user.get())
            user.data["stage"] = "blitz_hobby"
            user.send("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –æ —Å–≤–æ–∏—Ö —Ö–æ–±–±–∏ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        except:
            user.send("–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

    @staticmethod
    def blitz_hobby(user, bot):
        if len(user.get()) > 100:
            user.send("–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        user.data["stage"] = "idle"
        user.data["hobby"] = user.get()
        user.send("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ "
                  "–Ω–∞–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. 11 –¥–µ–∫–∞–±—Ä—è –º—ã –Ω–∞–∑–Ω–∞—á–∏–º –≤–∞—Å —Ç–∞–π–Ω—ã–º —Å–∞–Ω—Ç–∞ –∏ –ø—Ä–∏—à–ª–µ–º "
                  "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ, —á—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—É–≤–µ–Ω–∏—Ä –¥–ª—è –Ω–µ–≥–æ. "
                  "–¢–∞–∫ –∂–µ –≤–∞—à —Ç–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞ –ø–æ–ª—É—á–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞–∏—Ü—é –æ –≤–∞—Å) –ù–∏–∫—Ç–æ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è.")

    @staticmethod
    def idle(user, bot):
        user.send("–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 11 –¥–µ–∫–∞–±—Ä—è")

    @staticmethod
    def open_menu(user, bot):
        user.data["stage"] = "menu"
        user.send("", )

    @staticmethod
    def access_deny(user, bot):
        user.send(f"–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        MessageHandler.open_menu(user, bot)

    @staticmethod
    def handle_text(user, bot):
        admin = user.id in bot.data["admins"]
        method_name = user.data["stage"]
        method = eval(f"MessageHandler.{method_name}")
        permission = ag.get_permission(method)

        if permission == "any":
            method(user, bot)
        elif permission == "admin" and admin:
            method(user, bot)
        else:
            MessageHandler.access_deny(user, bot)

    @staticmethod
    def handle_click(user, update, bot):
        source = update.inner_source["data"]

    @staticmethod
    def handle(user, update, bot):
        if type(update) == tg_object_classes.Updater.CallbackQuery:
            MessageHandler.handle_click(user, update, bot)
        else:
            MessageHandler.handle_text(user, bot)


def loop_function(bot):
    pass


def parse_date(datestr):
    d, m, y = map(int, datestr.split("."))
    return datetime.datetime(year=y, month=m, day=d)


def main():
    config = ConfigParser()
    config.read("config.ini")
    config = config["DEFAULT"]
    cooldown = int(config["cooldown"])
    token = config["access_token"]
    admins = config["admins"].split(",")

    options = Options()
    options.request_timeout = 3
    options.serializer_path = "./serialized_data"
    options.loop_function = loop_function
    options.check_interval = cooldown

    bot = TelegramBotCreator(token, MessageHandler, options)
    bot.data["admins"] = admins
    if "users" not in bot.data:
        bot.data["users"] = []

    while True:
        try:
            bot.mainloop()
        except (UpdateException, Timeout, ConnectionError):
            pass


if __name__ == "__main__":
    main()
